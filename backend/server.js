const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const bcrypt = require('bcryptjs');

const app = express();

// PostgreSQL baƒülantƒ± ayarlarƒ±
const pool = new Pool({
  user: 'postgres',          
  host: 'localhost',         
  database: 'shopmind_db',   
  password: 'bet2516', 
  port: 5432,               
  max: 20,                  
  idleTimeoutMillis: 30000, 
  connectionTimeoutMillis: 2000, 
});

// Veritabanƒ± baƒülantƒ±sƒ±nƒ± test et ve tablolarƒ± olu≈ütur
async function initDatabase() {
  try {
    const client = await pool.connect();
    console.log('‚úÖ PostgreSQL baƒülantƒ±sƒ± ba≈üarƒ±lƒ±');
    
    // Users tablosunu olu≈ütur (yoksa)
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(255) PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Categories tablosunu olu≈ütur (yoksa) - Products'tan √∂nce olmalƒ±
    await client.query(`
      CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Products tablosunu olu≈ütur (yoksa)
    await client.query(`
      CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price DECIMAL(10,2) NOT NULL,
        description TEXT,
        image_url VARCHAR(500),
        category_id INTEGER DEFAULT 1,
        stock INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Popular Products tablosunu olu≈ütur (yoksa)
    await client.query(`
      CREATE TABLE IF NOT EXISTS popular_products (
        product_id INTEGER PRIMARY KEY REFERENCES products(id) ON DELETE CASCADE,
        rank INTEGER DEFAULT 0
      )
    `);
    
    // Eƒüer categories tablosu bo≈üsa varsayƒ±lan kategoriler ekle
    const categoryCheck = await client.query('SELECT COUNT(*) FROM categories');
    if (parseInt(categoryCheck.rows[0].count) === 0) {
      await client.query(`
        INSERT INTO categories (name, description) VALUES 
        ('Spor', 'Spor √ºr√ºnleri ve ekipmanlarƒ±'),
        ('Teknoloji', 'Bilgisayar, telefon ve teknoloji √ºr√ºnleri'),
        ('Kitap', 'Kitaplar ve eƒüitim materyalleri'),
        ('Otomobil', 'Ara√ß ve otomobil √ºr√ºnleri')
      `);
      console.log('‚úÖ Varsayƒ±lan kategoriler eklendi');
    }
    
    console.log('‚úÖ Users tablosu hazƒ±r');
    console.log('‚úÖ Products tablosu hazƒ±r');
    console.log('‚úÖ Categories tablosu hazƒ±r');
    console.log('‚úÖ Popular Products tablosu hazƒ±r');
    client.release();
    
  } catch (error) {
    console.error('‚ùå PostgreSQL baƒülantƒ± hatasƒ±:', error.message);
    console.error('üí° Kontrol edilecekler:');
    console.error('   - PostgreSQL servisi √ßalƒ±≈üƒ±yor mu?');
    console.error('   - Veritabanƒ± adƒ± doƒüru mu? (shopmind_db)');
    console.error('   - Kullanƒ±cƒ± adƒ± ve ≈üifre doƒüru mu?');
    console.error('   - Port numarasƒ± doƒüru mu? (5432)');
    process.exit(1);
  }
}

// CORS ayarlarƒ±
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:5173','http://localhost:5174', 'http://127.0.0.1:5173', 'http://127.0.0.1:3000'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

app.use(express.json());

// Static files (resimler i√ßin)
app.use('/images', express.static('public/images'));

// =============================================
// PRODUCTS API ENDPOINTS
// =============================================
// DISCOUNTED PRODUCTS API ENDPOINTS
// =============================================

// ƒ∞ndirimli √ºr√ºnleri getir
// ƒ∞ndirimli √ºr√ºnleri getir - D√ºzeltilmi≈ü versiyon
app.get('/api/discounted-products', async (req, res) => {
  console.log('üî• ƒ∞ndirimli √ºr√ºnler istendi');
  try {
    const result = await pool.query(`
      SELECT p.*, c.name as category_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id 
      WHERE p.discount > 0 AND p.stock > 0 
      ORDER BY p.discount DESC, p.created_at DESC
      LIMIT 20
    `);
    
    console.log(`‚úÖ ${result.rows.length} indirimli √ºr√ºn d√∂nd√ºr√ºld√º`);
    
    // Eƒüer hi√ß indirimli √ºr√ºn yoksa, rastgele √ºr√ºnleri indirimli yap
    if (result.rows.length === 0) {
      console.log('‚ö†Ô∏è  Hi√ß indirimli √ºr√ºn yok, rastgele √ºr√ºnleri indirimli yapƒ±yorum...');
      
      // Rastgele √ºr√ºnleri se√ß ve indirim uygula
      await pool.query(`
        UPDATE products 
        SET discount = CASE 
          WHEN random() < 0.3 THEN floor(random() * 30 + 10)::integer
          ELSE discount 
        END
        WHERE id IN (
          SELECT id FROM products 
          WHERE stock > 0 
          ORDER BY random() 
          LIMIT 8
        )
      `);
      
      // Tekrar indirimli √ºr√ºnleri getir
      const updatedResult = await pool.query(`
        SELECT p.*, c.name as category_name 
        FROM products p 
        LEFT JOIN categories c ON p.category_id = c.id 
        WHERE p.discount > 0 AND p.stock > 0 
        ORDER BY p.discount DESC, p.created_at DESC
        LIMIT 20
      `);
      
      console.log(`‚úÖ ${updatedResult.rows.length} indirimli √ºr√ºn olu≈üturuldu ve d√∂nd√ºr√ºld√º`);
      return res.json(updatedResult.rows);
    }
    
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå ƒ∞ndirimli √ºr√ºnler alƒ±nƒ±rken hata:', error);
    res.status(500).json({ 
      success: false,
      error: 'ƒ∞ndirimli √ºr√ºnler alƒ±namadƒ±',
      details: error.message 
    });
  }
});
// T√ºm √ºr√ºnleri getir
app.get('/api/products', async (req, res) => {
  console.log('üì¶ √úr√ºn listesi istendi');
  try {
    const result = await pool.query(`
      SELECT p.*, c.name as category_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id 
      WHERE p.stock > 0 
      ORDER BY p.created_at DESC
    `);
    
    console.log(`‚úÖ ${result.rows.length} √ºr√ºn d√∂nd√ºr√ºld√º`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå √úr√ºnler alƒ±nƒ±rken hata:', error);
    res.status(500).json({ 
      success: false,
      error: '√úr√ºnler alƒ±namadƒ±',
      details: error.message 
    });
  }
});

// Belirli bir √ºr√ºn√º getir
app.get('/api/products/:id', async (req, res) => {
  console.log('üîç Tek √ºr√ºn istendi, ID:', req.params.id);
  try {
    const { id } = req.params;
    const result = await pool.query(`
      SELECT p.*, c.name as category_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id 
      WHERE p.id = $1
    `, [id]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå √úr√ºn bulunamadƒ±:', id);
      return res.status(404).json({ 
        success: false,
        error: '√úr√ºn bulunamadƒ±' 
      });
    }
    
    console.log('‚úÖ √úr√ºn bulundu:', result.rows[0].name);
    res.json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå √úr√ºn alƒ±nƒ±rken hata:', error);
    res.status(500).json({ 
      success: false,
      error: '√úr√ºn alƒ±namadƒ±',
      details: error.message 
    });
  }
});

// Kategoriye g√∂re √ºr√ºnleri getir
app.get('/api/products/category/:categoryId', async (req, res) => {
  console.log('üìÇ Kategori √ºr√ºnleri istendi:', req.params.categoryId);
  try {
    const { categoryId } = req.params;
    const result = await pool.query(`
      SELECT p.*, c.name as category_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id 
      WHERE p.category_id = $1 AND p.stock > 0
      ORDER BY p.created_at DESC
    `, [categoryId]);
    
    console.log(`‚úÖ Kategori ${categoryId} i√ßin ${result.rows.length} √ºr√ºn bulundu`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå Kategoriye g√∂re √ºr√ºnler alƒ±nƒ±rken hata:', error);
    res.status(500).json({ 
      success: false,
      error: 'Kategoriye g√∂re √ºr√ºnler alƒ±namadƒ±',
      details: error.message 
    });
  }
});

// Yeni √ºr√ºn ekle
app.post('/api/products', async (req, res) => {
  console.log('‚ûï Yeni √ºr√ºn ekleme istendi:', req.body);
  try {
    const { name, price, description, image_url, category_id, stock } = req.body;
    
    if (!name || !price || !description) {
      console.log('‚ùå Gerekli alanlar eksik');
      return res.status(400).json({ 
        success: false,
        error: '√úr√ºn adƒ±, fiyat ve a√ßƒ±klama gerekli' 
      });
    }
    
    const result = await pool.query(`
      INSERT INTO products (name, price, description, image_url, category_id, stock) 
      VALUES ($1, $2, $3, $4, $5, $6) 
      RETURNING *
    `, [name, price, description, image_url || null, category_id || 1, stock || 0]);
    
    console.log('‚úÖ Yeni √ºr√ºn eklendi:', result.rows[0].name);
    res.status(201).json({ 
      success: true,
      message: '√úr√ºn ba≈üarƒ±yla eklendi',
      product: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå √úr√ºn eklenirken hata:', error);
    res.status(500).json({ 
      success: false,
      error: '√úr√ºn eklenemedi',
      details: error.message 
    });
  }
});

// √úr√ºn g√ºncelle
app.put('/api/products/:id', async (req, res) => {
  console.log('‚úèÔ∏è √úr√ºn g√ºncelleme istendi:', req.params.id, req.body);
  try {
    const { id } = req.params;
    const { name, price, description, image_url, category_id, stock } = req.body;
    
    const result = await pool.query(`
      UPDATE products 
      SET name = $1, price = $2, description = $3, image_url = $4, 
          category_id = $5, stock = $6, updated_at = CURRENT_TIMESTAMP
      WHERE id = $7 
      RETURNING *
    `, [name, price, description, image_url, category_id, stock, id]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå G√ºncellenecek √ºr√ºn bulunamadƒ±:', id);
      return res.status(404).json({ 
        success: false,
        error: '√úr√ºn bulunamadƒ±' 
      });
    }
    
    console.log('‚úÖ √úr√ºn g√ºncellendi:', result.rows[0].name);
    res.json({ 
      success: true,
      message: '√úr√ºn ba≈üarƒ±yla g√ºncellendi',
      product: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå √úr√ºn g√ºncellenirken hata:', error);
    res.status(500).json({ 
      success: false,
      error: '√úr√ºn g√ºncellenemedi',
      details: error.message 
    });
  }
});

// √úr√ºn sil
app.delete('/api/products/:id', async (req, res) => {
  console.log('üóëÔ∏è √úr√ºn silme istendi:', req.params.id);
  try {
    const { id } = req.params;
    const result = await pool.query('DELETE FROM products WHERE id = $1 RETURNING *', [id]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå Silinecek √ºr√ºn bulunamadƒ±:', id);
      return res.status(404).json({ 
        success: false,
        error: '√úr√ºn bulunamadƒ±' 
      });
    }
    
    console.log('‚úÖ √úr√ºn silindi:', result.rows[0].name);
    res.json({ 
      success: true,
      message: '√úr√ºn ba≈üarƒ±yla silindi',
      deletedProduct: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå √úr√ºn silinirken hata:', error);
    res.status(500).json({ 
      success: false,
      error: '√úr√ºn silinemedi',
      details: error.message 
    });
  }
});

// =============================================
// POPULAR PRODUCTS API ENDPOINTS
// =============================================

// Pop√ºler √ºr√ºnleri getir
app.get('/api/popular-products', async (req, res) => {
  console.log('‚≠ê Pop√ºler √ºr√ºnler istendi');
  try {
    const result = await pool.query(`
      SELECT p.*, c.name as category_name, pp.rank 
      FROM popular_products pp
      JOIN products p ON pp.product_id = p.id
      LEFT JOIN categories c ON p.category_id = c.id 
      WHERE p.stock > 0
      ORDER BY pp.rank ASC, p.created_at DESC
    `);
    
    console.log(`‚úÖ ${result.rows.length} pop√ºler √ºr√ºn d√∂nd√ºr√ºld√º`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå Pop√ºler √ºr√ºnler alƒ±nƒ±rken hata:', error);
    res.status(500).json({ 
      success: false,
      error: 'Pop√ºler √ºr√ºnler alƒ±namadƒ±',
      details: error.message 
    });
  }
});

// √úr√ºn√º pop√ºler √ºr√ºnlere ekle
app.post('/api/popular-products', async (req, res) => {
  console.log('‚≠ê Pop√ºler √ºr√ºn ekleme istendi:', req.body);
  try {
    const { product_id, rank } = req.body;
    
    if (!product_id) {
      console.log('‚ùå Product ID gerekli');
      return res.status(400).json({ 
        success: false,
        error: 'Product ID gerekli' 
      });
    }
    
    // √ñnce √ºr√ºn√ºn var olup olmadƒ±ƒüƒ±nƒ± kontrol et
    const productCheck = await pool.query('SELECT id FROM products WHERE id = $1', [product_id]);
    if (productCheck.rows.length === 0) {
      console.log('‚ùå √úr√ºn bulunamadƒ±:', product_id);
      return res.status(404).json({ 
        success: false,
        error: '√úr√ºn bulunamadƒ±' 
      });
    }
    
    // Zaten pop√ºler √ºr√ºnlerde var mƒ± kontrol et
    const existingCheck = await pool.query('SELECT product_id FROM popular_products WHERE product_id = $1', [product_id]);
    if (existingCheck.rows.length > 0) {
      console.log('‚ùå √úr√ºn zaten pop√ºler √ºr√ºnlerde:', product_id);
      return res.status(409).json({ 
        success: false,
        error: 'Bu √ºr√ºn zaten pop√ºler √ºr√ºnler listesinde' 
      });
    }
    
    const result = await pool.query(`
      INSERT INTO popular_products (product_id, rank) 
      VALUES ($1, $2) 
      RETURNING *
    `, [product_id, rank || 0]);
    
    console.log('‚úÖ Pop√ºler √ºr√ºn eklendi:', result.rows[0]);
    res.status(201).json({ 
      success: true,
      message: '√úr√ºn pop√ºler √ºr√ºnlere ba≈üarƒ±yla eklendi',
      popularProduct: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå Pop√ºler √ºr√ºn eklenirken hata:', error);
    res.status(500).json({ 
      success: false,
      error: 'Pop√ºler √ºr√ºn eklenemedi',
      details: error.message 
    });
  }
});

// Pop√ºler √ºr√ºn sƒ±ralamasƒ±nƒ± g√ºncelle
app.put('/api/popular-products/:productId', async (req, res) => {
  console.log('‚≠ê Pop√ºler √ºr√ºn g√ºncelleme istendi:', req.params.productId, req.body);
  try {
    const { productId } = req.params;
    const { rank } = req.body;
    
    const result = await pool.query(`
      UPDATE popular_products 
      SET rank = $1
      WHERE product_id = $2 
      RETURNING *
    `, [rank || 0, productId]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå G√ºncellenecek pop√ºler √ºr√ºn bulunamadƒ±:', productId);
      return res.status(404).json({ 
        success: false,
        error: 'Pop√ºler √ºr√ºn bulunamadƒ±' 
      });
    }
    
    console.log('‚úÖ Pop√ºler √ºr√ºn g√ºncellendi:', result.rows[0]);
    res.json({ 
      success: true,
      message: 'Pop√ºler √ºr√ºn ba≈üarƒ±yla g√ºncellendi',
      popularProduct: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå Pop√ºler √ºr√ºn g√ºncellenirken hata:', error);
    res.status(500).json({ 
      success: false,
      error: 'Pop√ºler √ºr√ºn g√ºncellenemedi',
      details: error.message 
    });
  }
});

// √úr√ºn√º pop√ºler √ºr√ºnlerden √ßƒ±kar
app.delete('/api/popular-products/:productId', async (req, res) => {
  console.log('üóëÔ∏è Pop√ºler √ºr√ºn silme istendi:', req.params.productId);
  try {
    const { productId } = req.params;
    const result = await pool.query('DELETE FROM popular_products WHERE product_id = $1 RETURNING *', [productId]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå Silinecek pop√ºler √ºr√ºn bulunamadƒ±:', productId);
      return res.status(404).json({ 
        success: false,
        error: 'Pop√ºler √ºr√ºn bulunamadƒ±' 
      });
    }
    
    console.log('‚úÖ Pop√ºler √ºr√ºn silindi:', result.rows[0]);
    res.json({ 
      success: true,
      message: '√úr√ºn pop√ºler √ºr√ºnlerden ba≈üarƒ±yla √ßƒ±karƒ±ldƒ±',
      deletedPopularProduct: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå Pop√ºler √ºr√ºn silinirken hata:', error);
    res.status(500).json({ 
      success: false,
      error: 'Pop√ºler √ºr√ºn silinemedi',
      details: error.message 
    });
  }
});

// =============================================
// CATEGORIES API ENDPOINTS
// =============================================

// Kategorileri getir
app.get('/api/categories', async (req, res) => {
  console.log('üìÇ Kategori listesi istendi');
  try {
    const result = await pool.query('SELECT * FROM categories ORDER BY name');
    console.log(`‚úÖ ${result.rows.length} kategori d√∂nd√ºr√ºld√º`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå Kategoriler alƒ±nƒ±rken hata:', error);
    res.status(500).json({ 
      success: false,
      error: 'Kategoriler alƒ±namadƒ±',
      details: error.message 
    });
  }
});

// =============================================
// USER ENDPOINTS
// =============================================

// Test endpoint
app.get('/api/test', async (req, res) => {
  try {
    const userResult = await pool.query('SELECT COUNT(*) as total FROM users');
    const productResult = await pool.query('SELECT COUNT(*) as total FROM products');
    const popularResult = await pool.query('SELECT COUNT(*) as total FROM popular_products');
    console.log('‚úÖ Test endpoint √ßalƒ±≈üƒ±yor');
    res.json({
      message: 'Server √ßalƒ±≈üƒ±yor!',
      timestamp: new Date().toISOString(),
      port: 5001,
      totalUsers: parseInt(userResult.rows[0].total),
      totalProducts: parseInt(productResult.rows[0].total),
      totalPopularProducts: parseInt(popularResult.rows[0].total),
      database: 'PostgreSQL'
    });
  } catch (error) {
    console.error('‚ùå Test endpoint hatasƒ±:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Veritabanƒ± baƒülantƒ± hatasƒ±' 
    });
  }
});

// T√ºm kullanƒ±cƒ±larƒ± g√∂ster
app.get('/api/users', async (req, res) => {
  try {
    console.log('üìã Kullanƒ±cƒ± listesi istendi');
    const result = await pool.query(
      'SELECT id, username, email, created_at FROM users ORDER BY created_at DESC'
    );
    
    res.json({
      success: true,
      users: result.rows
    });
  } catch (error) {
    console.error('‚ùå Kullanƒ±cƒ± listesi hatasƒ±:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Veritabanƒ± hatasƒ±' 
    });
  }
});

// KAYIT OL (REGISTER)
app.post('/api/register', async (req, res) => {
  console.log('üìù Kayƒ±t isteƒüi geldi:', req.body);
  
  const { username, email, password } = req.body;
  
  if (!username || !email || !password) {
    console.log('‚ùå Bo≈ü alanlar var');
    return res.status(400).json({
      success: false,
      error: 'Username, email ve password gerekli!'
    });
  }
  
  if (!email.includes('@')) {
    console.log('‚ùå Ge√ßersiz email format');
    return res.status(400).json({
      success: false,
      error: 'Ge√ßerli bir email adresi girin!'
    });
  }
  
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    const existingUser = await client.query(
      'SELECT id FROM users WHERE email = $1 OR username = $2',
      [email.toLowerCase().trim(), username.trim()]
    );
    
    if (existingUser.rows.length > 0) {
      await client.query('ROLLBACK');
      console.log('‚ùå Email veya username zaten kayƒ±tlƒ±');
      return res.status(409).json({
        success: false,
        error: 'Bu email adresi veya kullanƒ±cƒ± adƒ± zaten kayƒ±tlƒ±!'
      });
    }
    
    const hashedPassword = await bcrypt.hash(password, 12);
    const userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    
    const result = await client.query(
      'INSERT INTO users (id, username, email, password) VALUES ($1, $2, $3, $4) RETURNING id, username, email, created_at',
      [userId, username.trim(), email.toLowerCase().trim(), hashedPassword]
    );
    
    await client.query('COMMIT');
    
    const newUser = result.rows[0];
    
    console.log('‚úÖ Yeni kullanƒ±cƒ± PostgreSQL\'e kaydedildi:', {
      id: newUser.id,
      username: newUser.username,
      email: newUser.email,
      created_at: newUser.created_at
    });
    
    res.status(201).json({
      success: true,
      message: 'Kayƒ±t ba≈üarƒ±lƒ±! Giri≈ü sayfasƒ±na y√∂nlendiriliyorsunuz...',
      user: {
        id: newUser.id,
        username: newUser.username,
        email: newUser.email,
        created_at: newUser.created_at
      }
    });
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå Kayƒ±t hatasƒ±:', error);
    
    if (error.code === '23505') {
      res.status(409).json({
        success: false,
        error: 'Bu email adresi veya kullanƒ±cƒ± adƒ± zaten kayƒ±tlƒ±!'
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'Sunucu hatasƒ± olu≈ütu'
      });
    }
  } finally {
    client.release();
  }
});

// Gƒ∞Rƒ∞≈û YAP (LOGIN)
app.post('/api/login', async (req, res) => {
  console.log('üîê Giri≈ü isteƒüi geldi:', req.body);
  
  const { email, password } = req.body;
  
  if (!email || !password) {
    console.log('‚ùå Email veya password bo≈ü');
    return res.status(400).json({
      success: false,
      error: 'Email ve ≈üifre gerekli!'
    });
  }
  
  try {
    const result = await pool.query(
      'SELECT * FROM users WHERE email = $1',
      [email.toLowerCase().trim()]
    );
    
    if (result.rows.length === 0) {
      console.log('‚ùå Kullanƒ±cƒ± bulunamadƒ±:', email);
      return res.status(401).json({
        success: false,
        error: 'Email veya ≈üifre hatalƒ±!'
      });
    }
    
    const user = result.rows[0];
    
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      console.log('‚ùå ≈ûifre yanlƒ±≈ü:', email);
      return res.status(401).json({
        success: false,
        error: 'Email veya ≈üifre hatalƒ±!'
      });
    }
    
    console.log('‚úÖ Ba≈üarƒ±lƒ± giri≈ü:', {
      id: user.id,
      username: user.username,
      email: user.email
    });
    
    res.json({
      success: true,
      message: 'Giri≈ü ba≈üarƒ±lƒ±!',
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        created_at: user.created_at
      }
    });
    
  } catch (error) {
    console.error('‚ùå Giri≈ü hatasƒ±:', error);
    res.status(500).json({
      success: false,
      error: 'Sunucu hatasƒ± olu≈ütu'
    });
  }
});

// Veritabanƒ± baƒülantƒ±sƒ± durumu
app.get('/api/db-status', async (req, res) => {
  try {
    const result = await pool.query('SELECT NOW() as current_time, version() as version');
    res.json({
      success: true,
      connected: true,
      server_time: result.rows[0].current_time,
      postgresql_version: result.rows[0].version,
      pool_info: {
        total_connections: pool.totalCount,
        idle_connections: pool.idleCount,
        waiting_connections: pool.waitingCount
      }
    });
  } catch (error) {
    console.error('‚ùå Veritabanƒ± durum kontrol√º hatasƒ±:', error);
    res.status(500).json({
      success: false,
      connected: false,
      error: error.message
    });
  }
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Endpoint bulunamadƒ±'
  });
});

// Error handler
app.use((error, req, res, next) => {
  console.error('üí• Server hatasƒ±:', error);
  res.status(500).json({
    success: false,
    error: 'Sunucu hatasƒ±'
  });
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë Server kapatƒ±lƒ±yor...');
  await pool.end();
  console.log('‚úÖ PostgreSQL baƒülantƒ±larƒ± kapatƒ±ldƒ±');
  process.exit(0);
});

// Server ba≈ülat
const PORT = 5001;

async function startServer() {
  await initDatabase();
  app.listen(PORT, () => {
    console.log('üöÄ Server ba≈ülatƒ±ldƒ±!');
    console.log(`üìç Port: ${PORT}`);
    console.log(`üîó Test: http://localhost:${PORT}/api/test`);
    console.log(`üë• Kullanƒ±cƒ±lar: http://localhost:${PORT}/api/users`);
    console.log(`üì¶ √úr√ºnler: http://localhost:${PORT}/api/products`);
    console.log(`‚≠ê Pop√ºler √úr√ºnler: http://localhost:${PORT}/api/popular-products`);
    console.log(`üìÇ Kategoriler: http://localhost:${PORT}/api/categories`);
    console.log(`üóÑÔ∏è  DB Durum: http://localhost:${PORT}/api/db-status`);
    console.log('‚úÖ Hazƒ±r, istekleri bekliyor...');
  });
}

startServer().catch(console.error);